name: Docker

on:
  push:
    branches: [ "poc" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Define batch size for parallel processing
  BATCH_SIZE: 100

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          # Create a matrix with port ranges for parallel processing
          # Generate ranges from 80 to 5000 in BATCH_SIZE increments
          START=80
          END=5000
          
          # Initialize JSON array
          echo "matrix=$(seq $START $BATCH_SIZE $END | jq -c -n '{range: [inputs]}' | jq -c '(.range[] | tostring) as $item | .range = [.range[] | {"start": $item, "end": ($item|tonumber + ${{ env.BATCH_SIZE }} - 1 | tostring)}] | .range = [.range[] | select(.end|tonumber <= 5000)]')" >> $GITHUB_OUTPUT

  build-and-push:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        range: ${{ fromJson(needs.prepare-matrix.outputs.matrix).range }}
      # Allow other jobs to continue even if one fails
      fail-fast: false
      
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Enable layer caching for faster builds
          buildkitd-flags: --debug

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push images in batches using Docker Buildx's ability to tag multiple images at once
      - name: Generate tags list
        id: generate-tags
        run: |
          START=${{ matrix.range.start }}
          END=${{ matrix.range.end }}
          
          # Generate comma-separated list of tags
          TAGS=$(seq $START $END | awk -v reg="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" '{printf "%s:%s,", reg, $1}' | sed 's/,$//')
          echo "TAGS=$TAGS" >> $GITHUB_ENV
          echo "START=$START" >> $GITHUB_ENV
          echo "END=$END" >> $GITHUB_ENV
          
          # Just for logging
          echo "Building range from $START to $END"

      # Use multi-stage build to create all images in a single docker build command
      - name: Create Dockerfile for batch build
        run: |
          cat > Dockerfile.batch << 'EOF'
          # Base image
          FROM busybox:stable as base
          
          # Dynamic stages for each port
          EOF
          
          for i in $(seq $START $END); do
            cat >> Dockerfile.batch << EOF
          
          FROM base as port-$i
          ARG PORT=$i
          # Copy your original Dockerfile instructions here
          # For example:
          EXPOSE $i
          # Your application setup for this specific port
          CMD ["sh","-c","httpd -f -p $i -h /www"]
          EOF
          done
      
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.batch
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.TAGS }}
          # Use cache for faster builds
          cache-from: type=gha
          cache-to: type=gha,mode=max